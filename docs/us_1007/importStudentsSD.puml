@startuml
'http://plantuml.com/skinparam.html

actor Manager as Actor
participant CSVLoaderStudentsUI as UI <<presentation>>
participant CSVLoaderStudentsController as ControllerLoader <<application>>
participant ":List<String[]> data" as data
participant StudentParser as parser <<application>>
participant AddUserController as Controller <<application>>
participant UserBuilder as Builder <<builder>>
participant "user:User" as Domain <<domain>>
participant PersistenceContext as Persistence <<persistence>>
participant RepositoryFactory as Factory <<factory>>
database UserRepository as Repository <<repository>>

participant StudentBuilder as StudentBuilder <<builder>>
participant "student:Student" as DomainStudent <<domain>>
database StudentRepository as StudentRepository <<repository>>


Actor --> UI: Import csv student file
activate UI
    UI -> ControllerLoader: create
    activate ControllerLoader
    ControllerLoader -> parser : create
    deactivate ControllerLoader
    activate parser
    parser -> Controller : create

    activate Controller
    deactivate parser
    deactivate Controller

    UI --> Actor: ask user if he/she wants to\n "Load default file?[YES/NO]"

    Actor --> UI: answers the question

    UI -> ControllerLoader : loadResources()
    activate ControllerLoader
    ControllerLoader -> parser : parse(data)
    activate parser
    deactivate ControllerLoader







    parser -> Controller: addUser(username, \npassword, firstName,\nlastName, email, \nroles)

    activate Controller
        note right of Builder: UserBuilder is used to create\n a user with a valid state
        Controller -> Builder: create
        Controller -> Builder:setUsername(username)

        note right of Controller: Set the rest of the information

        'Controller -> Builder:setPassword(password)
        'Controller -> Builder:setFirstName(firstName)
        'Controller -> Builder:setLastName(lastName)
        'Controller -> Builder:setEmail(email)
        'Controller -> Builder:setRoles(roles)

        Controller -> Builder:createUser()
        activate Builder
            Builder -> Domain: create (username,\npassword, firstName,\nlastName,email, roles)
            Domain->Builder: user
            Builder -> Controller:user
        deactivate Builder

        Controller -> Persistence: repositories()
        activate Persistence
            note right of Persistence: pode criar reposit贸rio em mem贸ria ou JPA
            Persistence -> Factory: create
            Persistence -> Controller: factory
        deactivate Persistence

        Controller -> Factory: users()
        activate Factory
            Factory -> Repository: create
            Factory -> Controller: userRepository
        deactivate Factory

        Controller->Repository:save(user)

    deactivate Controller

    deactivate parser


    parser -> Controller : addStudent(mecanographicNumber,\nfullName,shortName\n,dateOfBirth,taxPayerNumber)
    activate parser
    activate Controller

     note right of Builder: StudentBuilder is used to create\n a student with a valid state

     Controller -> StudentBuilder: create
     Controller -> StudentBuilder: setMecanographicNumber(mecanographicNumber)

     note right of Controller: Set the rest of the information

     Controller -> StudentBuilder:createStudent()
             activate StudentBuilder
                 StudentBuilder -> DomainStudent: create (username,\npassword, firstName,\nlastName,email, roles)
                 DomainStudent->StudentBuilder: student
                 StudentBuilder -> Controller:student
             deactivate StudentBuilder

     Controller -> Persistence: repositories()
             activate Persistence
                 note right of Persistence: pode criar reposit贸rio em mem贸ria ou JPA
                 Persistence -> Factory: create
                 Persistence -> Controller: factory
             deactivate Persistence

     Controller -> Factory: students()
             activate Factory
                 Factory -> Repository: create
                 Factory -> Controller: StudentRepository
             deactivate Factory

     Controller->StudentRepository:save(student)


    deactivate Controller
    deactivate parser
        UI-->Actor: display success of the operation
deactivate UI
@enduml
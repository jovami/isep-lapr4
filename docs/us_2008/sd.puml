@startuml

actor Teacher as user
participant CreateFormativeExamUI as ui
participant CreateFormativeExamController as ctrl

participant FormativeExamRepository as repo

participant MyUserService as user_svc
participant Teacher as teacher

participant CourseRepository as c_repo

participant GrammarContext as ctx
participant GrammarToolFactory as grepo

participant FormativeExamFactory as fact
participant FormativeExamValidatorService as svc

participant FormativeExam as exam


participant StaffMemberExamRepository as sm_repo

participant AvailableCourseDTOMapper as mapper
' participant AvailableCourseDTO as dto


' participant PersistenceContext as ctx
' participant RepositoryFactory as rep_fac

' participant QuestionRepository as q_repo


user --> ui: enter

activate ui

    ui --> ctrl : create()
    activate ctrl
        ctrl --> repo
        note right : repository is retrieved via\nPersistenceContext.repositories()
        activate repo
        deactivate repo
    deactivate ctrl

    ui --> ctrl : courses()
    activate ctrl
        ctrl --> user_svc : currentTeacher()
        activate user_svc
            user_svc --> teacher : get()
            activate teacher
            deactivate teacher
            note right : teacher obtained via the framework's\nAuthz package + TeacherRepository
            user_svc --> ctrl : teacher
        deactivate user_svc

        ctrl --> sm_repo : nonClosedAndTaughtBy(teacher)
        activate sm_repo
            sm_repo --> ctrl : courses
        deactivate sm_repo

        ctrl --> mapper : toDTO(courses)
        note right : create AvailableCourseDTO\nfrom list
        activate mapper
            mapper --> ctrl : courseDTOList
        deactivate mapper
        '     loop for each course in courses
        '         mapper --> dto : create()
        '         activate dto
        '         deactivate dto
        '     end loop

        ctrl --> ui : courseDTOList
    deactivate ctrl

    ui --> user : show available courses
deactivate ui

user --> ui : select course and\ntype specification\nfile path

activate ui
    ui --> ctrl : createFormativeExam(courseDTO, file)
    activate ctrl
        ctrl --> c_repo : ofIdentity(courseDTO.courseId)
        activate c_repo
            c_repo --> ctrl : course
        deactivate c_repo

        ctrl --> ctx : grammarTools()
        activate ctx
            ctx --> grepo : formativeExamValidator()
            activate grepo
                grepo --> svc : create()
                activate svc
                deactivate svc
            deactivate grepo
        deactivate ctx

        ctrl --> fact : create(formativeExamValidator)
        activate fact
        deactivate fact

        ctrl --> fact : build(course, file)
        activate fact
            fact --> svc : validate(file)
            activate svc
            deactivate svc

            fact --> exam : create(course, specification)
            note left : specification read from file
            activate exam
            deactivate exam

            fact --> ctrl : exam
        deactivate fact

        ctrl --> repo : save(exam)
        activate repo
        deactivate repo

        ctrl --> ui : success
    deactivate ctrl

    ui --> user : report success
deactivate ui

@enduml

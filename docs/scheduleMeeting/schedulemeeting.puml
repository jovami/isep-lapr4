@startuml

skinparam packageStyle rect
skinparam shadowing false

actor User as Actor
participant ScheduleMeetingUI as UI <<presentation>> order 1
participant ScheduleMeetingController as Controller <<application>> order 2
participant "meeting:Meeting" as Meeting <<domain>> order 3
participant "recurringPattern:\nRecurringPattern" as Pattern <<domain>> order 4
participant "participant:\nEventParticipant" as EventParticipant <<domain>> order 4
participant PersistenceContext as Persistence <<persistence>> order 6
participant RepositoryFactory as Fact <<factory>> order 7
participant SystemUserRepository as UserRepo <<repository>> order 8
participant TimeTableRepository as timeTableRepo <<repository>> order 9

Actor -> UI : create Meeting
activate UI
    UI -> Controller : create
    Actor <-- UI : ask user information
    Actor -> UI : startDate,startTime,endTime
    UI -> Controller : createMeeting(startDate,startTime,endTime)
    activate Controller
            Controller -> Meeting : createMeeting(startDate,startTime,endTime)
            activate Meeting
                Meeting -> Pattern : createPattern(startDate,startTime,endTime)
                Meeting -> EventParticipant : create()
            Controller <-- Meeting : meeting
            deactivate Meeting

    loop [email!=null]
            Actor <-- UI : asks if wants to add new participant
            Actor -> UI : email
            UI -> Controller : check-email
            Controller -> Persistence : repositories()
            activate Persistence
            Persistence -> Fact : Users()
            activate Fact
                Fact -> UserRepo : create
                activate UserRepo
                Controller <-- Persistence: userRepository
                deactivate Fact
                deactivate Persistence
        Controller -> UserRepo : getUserByEmail(email)
        Controller <-- UserRepo : systemUser
    deactivate UserRepo
    Controller -> Meeting : addParticipant(systemUser);
    activate Meeting
        Meeting -> EventParticipant : addParticipant(systemUser);
    deactivate Meeting
    end

    Controller -> Persistence : repositories()
    activate Persistence
           Persistence -> Fact : timeTables()
           activate Fact
               Fact -> timeTableRepo : create
               activate timeTableRepo
               Controller <-- Persistence: courseRepository
               deactivate timeTableRepo
    deactivate Fact
    deactivate Persistence
    Controller -> UserRepo : checkAvailability(participants,recurringPattern)
    activate UserRepo
    Controller <-- UserRepo : returns availability
    deactivate UserRepo

    UI <-- Controller : Meeting
    deactivate Controller
Actor <-- UI : displayCourseInfo
deactivate UI

@enduml

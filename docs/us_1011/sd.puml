@startuml

skinparam packageStyle rect
skinparam shadowing false

actor User as Actor
participant ScheduleExtraLectureUI as UI <<presentation>>
participant ScheduleExtraLectureController as Controller <<application>>

participant ScheduleLectureService as scheduleService
participant TimeTableService as timetableService

database TeacherRepository as teacherRepo
database LectureRepository as lectureRepo
database LectureParticipantRepo as participantRepo

participant RecurringPattern as Pattern <<domain>>
participant Lecture as lecture
participant StudentUsernameMecanographicNumberDTOMapper as Mapper
participant StudentUsernameMecanographicNumberDTO as DTO

Actor -> UI : asks to create an extra lecture
activate UI
    deactivate Controller
    Actor <-- UI : ask user information
    Actor -> UI : date, startTime, \nduration
    UI -> Controller : listStudents()
    activate Controller

            Controller --> Mapper : toDto(students)
            loop for each user in users
            activate Mapper
            Mapper --> DTO : create(students)
            activate DTO

            deactivate DTO
            end
            Controller <-- Mapper : studentsDto
            deactivate Mapper
            UI <-- Controller : studentsDto
            Actor <-- UI : students

    loop [invite==true]
            Actor -> UI : students
            UI -> Controller : inviteStudents(students)
            Controller -> Controller : addInvited(students);

        deactivate lectureRepo

    Actor <-- UI : asks if it wants to \nadd a new participant
    end

    UI -> Controller : schedule(date, time, duration, participants)
        Controller -> teacherRepo : teacher = findBySystemUser(user)
        activate teacherRepo
        deactivate teacherRepo

        Controller -> Pattern : pattern = build(date, time, duration)
        activate Pattern
        deactivate Pattern

        Controller -> lecture : lecture = new Lecture(teacher, pattern)
        activate lecture
        deactivate lecture

        Controller -> scheduleService : scheduleLecture(teacher, pattern, participants)
        activate scheduleService
            scheduleService -> timetableService : checkAvailabilityByUser(teacher, pattern)
            activate timetableService
               scheduleService -> timetableService : schedule(teacher, pattern)
               loop for each participant
                    scheduleService -> timetableService : schedule(participant, pattern)
                    scheduleService -> timetableService : lectureParticipant = new LectureParticipant(paticipant, lecture)
                    deactivate timetableService
                    scheduleService -> participantRepo : save(lectureParticipant)
                    activate participantRepo
                    deactivate participantRepo
               end
        deactivate scheduleService

        Controller -> lectureRepo : save(lecture)
        activate lectureRepo
        deactivate lectureRepo

    UI <-- Controller : lecture
    deactivate Controller
Actor <-- UI : display Schedule Success
deactivate UI

@enduml


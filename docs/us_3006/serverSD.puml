@startuml

actor SBPServerApp as server


participant CreatePostItHandler as handler
participant SBProtocol as sbp
participant BoardService as b_svc
participant PostItService as p_svc
participant Client as c_user
participant Board as b
participant Cell as cell
participant PostIt as postit
participant CreatePostIt as c_postit
participant NewChangeEvent as nce
participant EventPublisher as ep

activate server
server ->  handler: create(sock,codeRequest)
    note right : -receives a socket and SBProtocol codeRequest\n-creates services
    activate handler

    deactivate handler



    server -> handler : run()
    note right : create DataInputStream as "inS"\ncreate DataOutputStream as "outS"

    activate handler
        handler -> c_user : user = getUserLoggedIn()
        activate c_user
        deactivate c_user

        handler -> b_svc : boardsUserCanWrite(user)
        activate b_svc
            b_svc -> handler : boards
        deactivate b_svc


        handler -> sbp : create()
        activate sbp
        note right of handler: appends all boards into string
            handler -> sbp : send(outS)
        deactivate sbp

        handler -> sbp : receiveText = create(inS)
        activate sbp
            sbp --> handler : content
            note right : content:\n-board title\n-position in board to create Post-It\n-content of Post-It
        deactivate sbp

        note right of handler: SBPServerApp as boards ,get board with boardTitle
        handler -> handler : checkIfCellIsOccupied(optBoard,position)


        handler -> cell : hasPostIt()
        activate cell
            cell --> handler : true/false
        deactivate cell


        handler -> p_svc : createPostIt(board,row,col,text, owner)
        activate p_svc
               p_svc -> b : getCell(row,col)
               activate b
               deactivate b
               p_svc -> postit : create(owner,text)
               activate postit
               deactivate postit
               p_svc -> cell : addPostIt(postit)
               activate cell
               deactivate cell
               p_svc --> handler : true/false
        deactivate p_svc
        note right of handler: SBPServerApp as boardHistories ,get histories of "optBoard"
        handler -> c_postit : create(sb)
        activate c_postit
            note right : sb contains:\n-row\n-column\n-Local date time\n-content of postit

        deactivate c_postit

        note right of handler : add postIt to boardHistory
        handler -> nce : event = create(boardTitle,receiveText)
        activate nce
        deactivate nce

        handler -> ep : publish(event)
        activate ep
        deactivate ep

        handler -> sbp : create()
        activate sbp
            note right : send success of the operation
            handler -> sbp : send(outS)

deactivate handler








@enduml



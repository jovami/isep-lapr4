    @startuml

  skinparam linetype ortho
  skinparam Shadowing False

  skinparam class {
        BackgroundColor<<Entity>> Moccasin
        BackgroundColor<<value object>> Azure
        BackgroundColor<<Event>> MediumAquaMarine
        BackgroundColor<<Service>> SkyBlue
        ArrowColor DarkSlateGrey
    }

    skinparam package {
        BackgroundColor PowderBlue
        packageLayout grid
        packageColumn 2
    }

    
package USER <<package>>{

    abstract User <<Entity>> 
        class DateOfBirth <<value object>> 
        class TaxPayerNumber <<value object>> 
        class FullName <<value object>> 
        class ShortName <<value object>> 

        User "1" --> "1" FullName   
        User "1" --> "1" ShortName
        User "1" --> "1" DateOfBirth
        User "1" --> "1" TaxPayerNumber




  package TEACHER <<Aggregate>> {
      entity Teacher <<root>> <<Entity>>

      class Acronym <<value object>> 



  Teacher "1" -> "1" Acronym
  }
  Teacher "1" --|> "1" User

  package MANAGER <<Aggregate>> {
      entity Manager <<root>> <<Entity>>

      class ManagerId <<value object>> 


      Manager "1" -> "1" ManagerId
  }
      Manager "1" --|> "1" User

  package STUDENT <<Aggregate>> {
      entity Student <<root>> <<Entity>>

      class MecanographicNumber <<value object>> 


      Student "1" -> "1" MecanographicNumber
  }
      Student "1" --|> "1" User
}


      package TIMETABLE <<Aggregate>> {
          interface Event <<interface>>

          entity RecurringPattern <<root>> <<entity>>{
              - startDate
              - endDate
              - startTime
              - endTime
          }

          enum RecurringFrequency <<enum>>{
            - weekly
            - once
          }

          RecurringPattern "1" --> "1" RecurringFrequency
          RecurringPattern "1" -> "*" Event
      }

    User "N" --> "N" RecurringPattern

  package CoursePackage <<Rectangle>> {
      package COURSE <<Aggregate>> {
          entity Course <<root>> <<Entity>>

          class CourseCode <<value object>>

          class CourseName <<value object>>

          class CourseDescription <<value object>>

          class CourseClass <<value object>>

          enum CourseState <<value object>>{
              - closed
              - open
              - enroll
              - inProgress
          }

          class CourseCapacity <<value object>> {
              -minStudents
              -maxStudents
          }

          class CourseEvent <<Event>>

          class CourseClosedEvent
          class CourseOpenEvent
          class CourseEnrollOpenEvent
          class CourseEnrollClosedEvent
          class CourseCreatedEvent

          Course "1" -down--> "1" CourseCode
          Course "1" -down--> "1" CourseName
          Course "1" -down--> "1" CourseState
          Course "1" -down--> "1" CourseDescription
          Course "1" -down--> "1" CourseCapacity
          Course -up-> CourseEvent
          Course "1" ----> "*" CourseClass
          CourseEvent -up--> CourseClosedEvent
          CourseEvent -up--> CourseOpenEvent
          CourseEvent -up--> CourseEnrollOpenEvent
          CourseEvent -up--> CourseEnrollClosedEvent
          CourseEvent -up--> CourseCreatedEvent
          CourseClass -up-|> Event
      }

      package COURSE_ACCESS <<Aggreggate>>{
          entity CourseAccess <<root>> <<Entity>>
          CourseAccess "*" -down----> "1" Student
          Course "1" -> "*" CourseAccess

          class CourseEnrollmentRequestEvent <<Event>>
          CourseAccess "1" <-up- "1" CourseEnrollmentRequestEvent
          Manager "1" -down-> "1" CourseEnrollmentRequestEvent
      }

      Teacher "*" -up> "1" Course : participate >
      'Teacher "1" -> "1" Course : in charge of >
  }

  package ExamPackage <<Rectangle>> {
      package EXAM_SPECIFICATION <<Aggregate>> {
          entity ExamSpecification <<root>> <<Entity>>
          class ExamTitle <<value object>>
          class HeaderDescription <<value object>>
          class ExamHeader <<value object>>
          class ExamSection <<value object>>
          class SectionDescription <<value object>>

          class Question <<value object>> {
              -description
              -solution
          }

          class QuestionFeedback <<value object>>

          enum QuestionType <<value object>> {
              - matching
              - multipleChoices
              - shortAnswer
              - numerical
              - selectMissingWord
              - true/False
          }

          enum FeedbackType <<value object>> {
              - none
              - onSubmission
              - afterClosing
          }

          enum GradeType <<value object>> {
              - none
              - onSubmission
              - afterClosing
          }
      }

      package EXAM <<Aggregate>> {
          entity Exam <<root>> <<Entity>>

          class ExamDate <<value object>> {
              -openDate
              -closeDate
          }

          class ExamEvent <<Event>>
          class OpeningEvent <<Event>>
          class ClosingEvent <<Event>>
      }

      package EXAM_RESULT <<Aggregate>> {
          entity ExamResult <<root>> <<Entity>>

          class ExamGrade <<value object>>
          class ExamFeedback <<value object>>
      }

      class ExamGradingService <<Service>>

      ExamSpecification "1" -up-> "1" ExamTitle
      ExamSpecification "1" -right--> "1" ExamHeader

      ExamHeader "1" -right--> "0..1" HeaderDescription
      ExamHeader "1" -down-> "1" FeedbackType
      ExamHeader "1" -down-> "1" GradeType

      ExamSpecification "1" -up-> "1..*" ExamSection

      ExamSection "1" -up-> "0..1" SectionDescription
      ExamSection "1" -up--> "1..*" Question

      Question "1" -up> "1" QuestionType
      Question "1" -> "0..*" QuestionFeedback

      Exam "1" -down> "1" ExamSpecification
      /' curso liga se a exame '/
      Exam "1" -> "1" ExamDate
      OpeningEvent -up--> ExamEvent
      ClosingEvent -up--> ExamEvent
      Exam "1" -up-> "1" ExamEvent
      ExamGradingService "1" -up----> "1" ExamResult

      ExamResult "1" -up-> "1" ExamGrade
      ExamResult "1" -> "1" ExamFeedback

      Course "1" -> "0..*" Exam

      ClosingEvent -> ExamGradingService
      note bottom: responsible for auto-correcting\nand grading the exam

      Student "1" -right-> "0..1" ExamResult
      Teacher "*" -u-> "1" ExamSpecification : creates >
  }

  package BOARDPackage <<Rectangle>> {
  package BOARD <<Aggregate>> {

      entity Board <<root>> <<Entity>>
      class BoardTitle <<value object>>

      enum BoardStatus <<value object>>{
                    - created
                    - shared
                    - archived
                }

      entity Cell <<Entity>>{
                    -rowTitle
                    -columnTitle
                }
      note right : save history of cell

      class cellID <<value object>>
      class header <<value object>>

      entity BoardHistory <<Entity>>

      class TimeStamp <<value object>>

      entity PostIt <<Entity>> {
                    - typeOfContent
                    -owner
      }
      note right: Image or text

      class PostItID <<value object>>

      abstract  BoardParticipant <<Entity>>


      class ShareBoard <<Event>>

      class CommitPostIt <<Event>>
      note bottom : event triggered when\npost-it is created or modified



      class BoardService <<Service>>
      Board -down--> BoardService
      note right :responsible for creating,\n sharing, and managing\n shared boards

      class PostItService <<Service>>
      BoardHistory -down-> PostItService
      note bottom : responsible for create or modify PostIt\n(save previous post in BoardHistory)


  }

    Board "1" --> "1" BoardStatus

    Cell "1" --> "1" cellID
    Cell "1" --> "1" header
    Board "1" --> "*" BoardHistory
    BoardHistory "*"--> "1" PostIt
    Board "1" --> "1" BoardTitle
    Board "1" *-up-- "1..*" Cell : part of <
    Cell "1"  *--- "0..1" PostIt : part of <

    ShareBoard <- Board
    BoardParticipant "*"--up> "1" Board : creates/participate >
    CommitPostIt <- PostIt
    PostIt "1" -down-> "1" PostItID
    BoardHistory "1" --> "1" TimeStamp
    BoardHistory --> BoardParticipant

    Student "1" -up--> "1" BoardParticipant
    Teacher "1" -up--> "1" BoardParticipant
    Manager "1" -> "1" BoardParticipant

    CommitPostIt -> PostItService
    
  }

  package MEETING <<Aggregate>> {

      entity Meeting <<root>> <<Entity>>

      class MeetingInfo <<value object>>{
          -admin
      }

      class Duration <<value object>> 

      class ScheduleMeeting <<Event>>

      class CancelsMeeting <<Event>>

      class MeetingService <<Service>>
      note right: responsible for managing\n meetings between users


      abstract  MeetingParticipant <<Entity>>


      MeetingParticipant "*"--up> "1" Meeting : creates/participate >


      Meeting "1" --> "1" Duration
      Meeting "1" --> "1" MeetingInfo
      Meeting  -up->  ScheduleMeeting
      CancelsMeeting  -down->  Meeting

      Student "1" -up--> "1" MeetingParticipant
      Teacher "1" -up--> "1" MeetingParticipant
      Manager "1" ---> "1" MeetingParticipant



      Meeting ---> MeetingService
      MeetingService --> RecurringPattern
  }


  class UserManagementService <<Service>>
  Manager --left> UserManagementService
  note left: responsible for creating, disabling/enabling, \nand listing users in the system

  class CourseManagementService <<Service>>
  Course -> CourseManagementService
  note right: responsible for enrolling students in a course,\n either by bulk import or by individual request


@enduml

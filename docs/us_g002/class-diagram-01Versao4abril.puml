@startuml

skinparam linetype ortho
skinparam Shadowing False

skinparam class {
    BackgroundColor<<Entity>> Moccasin
    BackgroundColor<<value object>> Azure
    BackgroundColor<<Event>> MediumAquaMarine
    BackgroundColor<<Service>> SkyBlue
    ArrowColor DarkSlateGrey
}

skinparam package {
    BackgroundColor PowderBlue
    packageLayout grid
    packageColumn 2
}


package UserPackage <<rectangle>>{
    abstract User <<Entity>>

    class DateOfBirth <<value object>>
    class TaxPayerNumber <<value object>>
    class FullName <<value object>>
    class ShortName <<value object>>

    User  -->  FullName
    User  -->  ShortName
    User  -->  DateOfBirth
    User  -->  TaxPayerNumber

    package TEACHER <<Aggregate>> {
        entity Teacher <<root>> <<Entity>>
        class Acronym <<value object>>

        Teacher  ->  Acronym
    }
   

    package MANAGER <<Aggregate>> {
        entity Manager <<root>> <<Entity>>
        class ManagerId <<value object>>

        Manager  ->  ManagerId
    }
   

    package STUDENT <<Aggregate>> {
        entity Student <<root>> <<Entity>>
        class MecanographicNumber <<value object>>

        Student  ->  MecanographicNumber
    }

    Manager  --|>  User
    Teacher  --|>  User
    Student  --|>  User
}

package CoursePackage <<Rectangle>> {
    package COURSE <<Aggregate>> {
        entity Course <<root>> <<Entity>>

        class CourseCode <<value object>>

        class CourseName <<value object>>

        class CourseDescription <<value object>>

        enum CourseState <<value object>>{
            - closed
            - open
            - enroll
            - inProgress
        }

        class CourseCapacity <<value object>> {
            -minStudents
            -maxStudents
        }

        class CourseEvent <<Event>>

        class CourseClosedEvent
        class CourseOpenEvent
        class CourseEnrollOpenEvent
        class CourseEnrollClosedEvent
        class CourseCreatedEvent

        Course "1" -down-> "1" CourseCode
        Course "1" -down-> "1" CourseName
        Course "1" -down-> "1" CourseState
        Course "1" -down-> "1" CourseDescription
        Course "1" -down-> "1" CourseCapacity
        Course -up-> CourseEvent
        Course "1" ----> "*" Lecture
        CourseEvent <|-up-- CourseClosedEvent
        CourseEvent <|-up-- CourseOpenEvent
        CourseEvent <|-up-- CourseEnrollOpenEvent
        CourseEvent <|-up-- CourseEnrollClosedEvent
        CourseEvent <|-up-- CourseCreatedEvent
    }

    package COURSE_ACCESS <<Aggreggate>>{
        entity CourseAccess <<root>> <<Entity>>
        Course "1" -> "*" CourseAccess
        Student "*" -> "1" CourseAccess
    }

    package COURSE_ENROLLMENT_REQUEST <<Aggreggate>>{
        entity EnrollmentRequest <<root>> <<Entity>>

        EnrollmentRequest  *-- "*" Student
        EnrollmentRequest -> CourseAccess
    }

    Teacher "*" -up--* Course : participate >
    Teacher "1" -up--* Course : regent >

    class CourseManagementService <<Service>>
    Course -> CourseManagementService
    note top: responsible for enrolling students in a course,\n either by bulk import or by individual request

}

package ExamPackage <<Rectangle>> {
        
    package EXAM <<Aggregate>> {
        entity Exam <<root>> <<Entity>>

        class ExamDate <<value object>> {
            -openDate
            -closeDate
        }

        class ExamEvent <<Event>>
        class OpeningEvent <<Event>>
        class ClosingEvent <<Event>>

        entity ExamSpecification <<Entity>>
        class ExamTitle <<value object>>
        class HeaderDescription <<value object>>
        class ExamHeader <<value object>>
        class ExamSection <<value object>>
        class SectionDescription <<value object>>

        class Question <<value object>> {
            -description
            -solution
        }

        class QuestionFeedback <<value object>>

        enum QuestionType <<value object>> {
            - matching
            - multipleChoices
            - shortAnswer
            - numerical
            - selectMissingWord
            - true/False
        }

        enum FeedbackType <<value object>> {
            - none
            - onSubmission
            - afterClosing
        }

        enum GradeType <<value object>> {
            - none
            - onSubmission
            - afterClosing
        }

    }

    package EXAM_RESULT <<Aggregate>> {
        entity ExamResult <<root>> <<Entity>>

        class ExamGrade <<value object>>
        class ExamFeedback <<value object>>
    }

    class ExamGradingService <<Service>>

    ExamHeader "1" -right--> "0..1" HeaderDescription
    ExamHeader "1" -down-> "1" FeedbackType
    ExamHeader "1" -down-> "1" GradeType


    ExamSpecification "1" -up-> "1" ExamTitle
    ExamSpecification "1" -right--> "1" ExamHeader
    ExamSpecification "1" -up-> "1..*" ExamSection

    ExamSection "1" -up-> "0..1" SectionDescription
    ExamSection "1" -up--> "1..*" Question

    Question "1" -up> "1" QuestionType
    Question "1" -> "0..*" QuestionFeedback

    Exam "1" ----> "1" ExamSpecification
    Exam "1" -> "1" ExamDate
    Exam "1" -up-> "1" ExamEvent

    /' curso liga se a exame '/

    OpeningEvent -up--> ExamEvent
    ClosingEvent -up--> ExamEvent
    
    ExamGradingService "1" -up----> "1" ExamResult

    ExamResult "1" -up-> "1" ExamGrade
    ExamResult "1" -> "1" ExamFeedback

    Course "1" *-- "0..*" Exam

    ClosingEvent -> ExamGradingService
    note bottom: responsible for auto-correcting\nand grading the exam

    Student "1" -right-> "0..1" ExamResult
    Teacher -->  Exam : creates >
}

package BoardPackage <<Rectangle>> {
    package BOARD <<Aggregate>> {

        entity Board <<root>> <<Entity>>
        class BoardTitle <<value object>>

        enum BoardStatus <<value object>>{
            - created
            - shared
            - archived
        }

        entity Cell <<Entity>>{
        }

        class rowTitle <<value object>>
        class columnTitle <<value object>>
        class header <<value object>>

        entity BoardHistory <<Entity>>
        note left : stores every post-it that \nis created/modified

        class TimeStamp <<value object>>

        entity PostIt <<Entity>> {
            - postItId
        }
        note right: Image or text

        enum TypeOfContent{
            - text
            - image
        }
        PostIt -> TypeOfContent

        entity  BoardParticipant <<Entity>>

        class ShareBoardEvent <<Event>>

        class CommitPostItEvent <<Event>>
        note bottom : event triggered when\npost-it is created or modified

        class ShareBoardService <<Service>>
        Board -down-> ShareBoardService
        note right :responsible for sharing boards

        class PostItService <<Service>>
        BoardHistory -down-> PostItService
        note bottom : responsible for create or modify PostIt\n(save previous post in BoardHistory)


    }

    Board "1" -> "1" BoardStatus
    Board "1" -> "1" BoardTitle
    Board "1" --> "*" BoardHistory
    Board "1" *-up-> "1..*" Cell : part of <
    Board "1" *-up- "1" User : owns <

    Cell "1" -> "1" header
    Cell "1" -> "1" rowTitle
    Cell "1" -> "1" columnTitle
    Cell "1"  *-- "0..1" PostIt : part of <
    
    ShareBoardEvent <- Board
    ShareBoardEvent -> ShareBoardService

    BoardParticipant "*"--up> "1" Board : creates/participate >
    BoardParticipant "1" -> "*"  User
    PostIt -> BoardParticipant : owns <


    CommitPostItEvent <- PostIt
    CommitPostItEvent ---> PostItService

    BoardHistory "1" --> "1" TimeStamp
    BoardHistory "*"--> "1" PostIt
    BoardHistory "*"--> "1" PostIt
    BoardHistory --> BoardParticipant

}

package EventPackage <<Rectangle>> {

    interface Event <<interface>>

    package TIMETABLE <<Aggregate>> {

        entity EventAccess <<entity>><<root>>{
        }

        EventAccess "*" -> "1" User

    }

    package EventPattern <<Aggregate>> {


        entity Exception{
            -period
        }

        class RescheduleEventService <<Service>>
        Exception --> RescheduleEventService

        entity RecurringPattern <<root>> <<entity>>{
            -endDate
            -startDate
            -dayOfTheWeek
            -startTime
            -endTime
        }
        class RescheduleEventService <<Service>>

        enum RecurringFrequency <<enum>>{
            - weekly
            - once
        }

        RecurringPattern --> RecurringFrequency
    }

    class CheckAvailabilityService<<Service>>
    
    package Lecture <<Aggregate>>{
        Entity Lecture <<root>><<entity>>{
            -attendants

        }
        enum LectureType{
            -regular
            -extra
        }

        Lecture --> LectureType

    }
    

    package MEETING <<Aggregate>> {

        entity Meeting <<root>> <<Entity>>

        class ScheduleMeetingEvent <<Event>>

        class CancelsMeetingEvent <<Event>>

        class MeetingService <<Service>>
        note right: responsible for managing\n meetings between users

        entity MeetingParticipant <<Entity>>

        enum ParticipantStatus {
            - accepted
            - rejected
            - pending
        }

        Meeting -> MeetingService
        Meeting  -up->  ScheduleMeetingEvent
        Meeting <-up- CancelsMeetingEvent
        

        MeetingParticipant "1" -> "*" User
        MeetingParticipant  ->  ParticipantStatus
        MeetingParticipant "*"--up> "1" Meeting : creates/participate >

    }
    
    
    EventAccess --> CheckAvailabilityService
    EventAccess ->  Event

    Lecture *-- Student

    RecurringPattern --> CheckAvailabilityService
    RecurringPattern *-- Exception

    Event "1" -down-> "*" RecurringPattern

    Lecture --> Teacher : teaches
    Lecture -down--|> Event

    Meeting -> User : administrates <
    Meeting -down-|> Event


}


@enduml

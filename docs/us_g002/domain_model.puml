@startuml

skinparam linetype ortho
skinparam Shadowing False

skinparam class {
    BackgroundColor<<Entity>> Moccasin
    BackgroundColor<<value object>> Azure
    BackgroundColor<<Event>> MediumAquaMarine
    BackgroundColor<<Service>> SkyBlue
    ArrowColor DarkSlateGrey
}

skinparam package {
    BackgroundColor PowderBlue
    packageLayout grid
    packageColumn 2
}


package UserPackage <<Rectangle>>{

    package SystemUser <<Aggregate>> {
        Class SystemUser <<Entity>>
        class Password <<value object>>
        class Email <<value object>>
        
        SystemUser -> Password
        SystemUser -> Email
    }


    class DateOfBirth <<value object>>
    class TaxPayerNumber <<value object>>
    class FullName <<value object>>
    class ShortName <<value object>>


    package TEACHER <<Aggregate>> {
        entity Teacher <<root>> <<Entity>>
        class Acronym <<value object>>

        Teacher  ->  Acronym
    }

    Teacher  -down--->  FullName
    Teacher  -down-->  ShortName
    Teacher  -down-->  DateOfBirth
    Teacher  -down-->  TaxPayerNumber

    package MANAGER <<Aggregate>> {
        entity Manager <<root>> <<Entity>>
        class ManagerId <<value object>>

        Manager  ->  ManagerId
    }
    Manager  -down-->  FullName
    Manager  -down-->  ShortName
    Manager  -down-->  DateOfBirth
    Manager  -down-->  TaxPayerNumber


    package STUDENT <<Aggregate>> {
        entity Student <<root>> <<Entity>>
        class MecanographicNumber <<value object>>

        Student  ->  MecanographicNumber
    }
    Student  -down-->  FullName
    Student  -down-->  ShortName
    Student  -down-->  DateOfBirth
    Student  -down-->  TaxPayerNumber

    SystemUser -down-* Manager    
    SystemUser -down-* Teacher
    SystemUser -down-* Student
}

package CoursePackage <<Rectangle>> {
    package COURSE <<Aggregate>> {
        entity Course <<root>> <<Entity>>

        class CourseCode <<value object>>

        class CourseName <<value object>>

        class CourseDescription <<value object>>

        class CourseDuration <<value object>>{
            - startDate
            - endDate
        }

        enum CourseState <<enum>>{
            - closed
            - open
            - enroll
            - inProgress
        }

        class CourseCapacity <<value object>> {
            -minStudents
            -maxStudents
        }

        interface CourseEvent <<Event>>

        class CourseClosedEvent <<Event>>
        class CourseOpenEvent <<Event>>
        class CourseEnrollOpenEvent <<Event>>
        class CourseEnrollClosedEvent <<Event>>
        class CourseCreatedEvent <<Event>>

        Course "1" -down-> "1" CourseCode
        Course "1" -up-> "1" CourseName
        Course "1" -up-> "1" CourseState
        Course "1" -down-> "1" CourseDescription
        Course "1" -down-> "1" CourseCapacity
        Course -up-> CourseEvent
        Course "1" ----> "*" Lecture
        Course "1" -> "1" CourseDuration

        CourseEvent <|-up-- CourseClosedEvent
        CourseEvent <|-left-- CourseOpenEvent
        CourseEvent <|-up-- CourseEnrollOpenEvent
        CourseEvent <|-up-- CourseEnrollClosedEvent
        CourseEvent <|-up-- CourseCreatedEvent

    }

    package STAFF <<Aggregate>>{
        entity Staff <<Entity>>
        Course *-down-- Staff
    }
    note right : STAFFF?????? \\0/ change name

    package COURSE_ACCESS <<Aggregate>>{
        entity Enrollment <<root>> <<Entity>>
        Course "1" -> "*" Enrollment
        Student "*" -o "1" Enrollment
    }

    package COURSE_ENROLLMENT_REQUEST <<Aggregate>>{
        entity EnrollmentRequest <<root>> <<Entity>>

        EnrollmentRequest  *-- "*" Student
        EnrollmentRequest -> Enrollment
    }

    Teacher "*" -up--o "1" Staff 
    Teacher "1" -up--* "0..*" Course : manages 

    class CourseManagementService <<Service>>
    Course -> CourseManagementService
    note top: responsible for enrolling students in a course,\n either by bulk import or by individual request

    Course "1" o- "1" Enrollment : enrolls
}

package ExamPackage <<Rectangle>> {

    abstract Exam <<interface>>{
        ' - examSections()
        ' - feedbackType()
        ' - gradingType()
    }

    package REGULAR_EXAM <<Aggregate>> {
        entity RegularExam <<root>> <<Entity>>

        class ExamDate <<value object>> {
            -openDate
            -closeDate
        }

        class ClosingEvent <<Event>>

        class ExamTitle <<value object>>
        class HeaderDescription <<value object>>
        class ExamHeader <<value object>>

        enum FeedbackType <<value object>> {
            - none
            - onSubmission
            - afterClosing
        }

        enum GradeType <<value object>> {
            - none
            - onSubmission
            - afterClosing
        }

    }

    class ExamSection <<value object>>{
        - description
    }

    package FORMATIVE_EXAM <<Aggregate>> {
        entity FormativeExam <<root>> <<entity>>
        note right: feedback and grading are always on submission
    }

    package FORMATIVE_EXAM_SPECIFICATION <<Aggregate>> {
        entity FormativeExamSpecification <<root>> <<entity>>

        class FormativeExamTitle <<value object>>
        class FormativeExamDescription <<value object>>
        class FormativeExamSection <<value object>>{
            - description
        }
    }

    package EXAM_QUESTION <<Aggregate>> {
        entity Question <<root>> <<entity>> {
            -description
            -solution
        }

        

        class QuestionFeedback <<value object>>

        enum QuestionType <<enum>> {
            - matching
            - multipleChoices
            - shortAnswer
            - numerical
            - selectMissingWord
            - true/False
        }

        QuestionType "1..*" <--- "1" FormativeExamSection
    }

    package EXAM_RESULT <<Aggregate>> {
        entity ExamResult <<root>> <<Entity>>{
            - period
        }
        class ExamGrade <<value object>>
        class ExamFeedback <<value object>>

    }
    package ANSWER <<Aggregate>> {
        entity AnswerGiven <<root>> <<Entity>>{
        }
    }
    class Answer <<value object>>{
        }

    class SubmissionEvent <<Event>>
    class ExamGradingService <<Service>>

    FormativeExamSpecification "1" --down-> "0..1" FormativeExamDescription
    FormativeExamSpecification "1" --> "1" FormativeExamTitle
    FormativeExamSpecification "1" -up-> "*" FormativeExamSection
    FormativeExamSpecification "1" -up---> "0..*" FormativeExam

    ExamHeader "1" -right--> "0..1" HeaderDescription
    ExamHeader "1" -down-> "1" FeedbackType
    ExamHeader "1" -down-> "1" GradeType


    RegularExam "1" -up-> "1" ExamTitle
    RegularExam "1" -down--> "1" ExamHeader
    RegularExam "1" -up-> "1..*" ExamSection
    FormativeExam "1" --> "1..*" ExamSection

    ExamSection "1" -up--> "1..*" Question

    Question "1" *-up "1" Answer : solution
    Question "1" *-up "1" QuestionType
    Question "1" -> "0..*" QuestionFeedback

    RegularExam "1" -> "1" ExamDate

    /' curso liga se a exame '/

    ClosingEvent <-up-- RegularExam
    SubmissionEvent -> ExamGradingService
    Exam --> SubmissionEvent

    ExamGradingService "1" ---up--> "1" ExamResult

    ExamResult "1" -up-> "1" ExamGrade
    ExamResult "1" -> "1" ExamFeedback
    ExamResult "1" o-right- "1" Student :does exam <

    ExamResult "1" *- "*" AnswerGiven
    AnswerGiven "1" *-- "1" Question 
    AnswerGiven "1" *- "1" Answer

    Course "1" *-- "0..*" Exam

    ClosingEvent -> ExamGradingService
    note bottom: responsible for auto-correcting\nand grading the exam

    Teacher -->  RegularExam

    RegularExam -|> Exam
    FormativeExam -|> Exam
}

package BoardPackage <<Rectangle>> {
    package BOARD <<Aggregate>> {

        entity Board <<root>> <<Entity>>{
            - MaxCollumns
            - MaxRows
        }
        class BoardTitle <<value object>>

        enum BoardStatus <<enum>>{
            - created
            - shared
            - archived
        }

        entity BoardRow <<Entity>>{
            - rowId
            - rowTitle          
        }
                
        entity BoardCollumn  <<Entity>>{
            - collumnId
            - collumnTitle
        }
        
        entity Cell <<Entity>>{
        }
        class Header<<value object>>
        
        entity BoardHistory <<Entity>>
        note left : stores every post-it that \nis created/modified

        class TimeStamp <<value object>>

        entity PostIt <<Entity>> {
            - postItId
        }
        note right: Image or text

        enum TypeOfContent <<enum>>{
            - text
            - image
        }

        entity  BoardParticipant <<Entity>>
        
        enum Permissions <<enum>>{
            - read
            - write
        }

        class ShareBoardEvent <<Event>>

        class CommitPostItEvent <<Event>>
        note bottom : event triggered when\npost-it is created or modified

        class ShareBoardService <<Service>>
        Board --> ShareBoardService
        note right :responsible for sharing boards

        class PostItService <<Service>>
        BoardHistory ---> PostItService
        note bottom : responsible for create or modify PostIt\n(save previous post in BoardHistory)

        class CreateBoardService <<Service>>
        Board  -up-> CreateBoardService
        note bottom : responsible manage the cells in the board



    }

    Board *-up- BoardRow
    Board *-up- BoardCollumn
    Board "1" --> "1" BoardStatus
    Board "1" --> "1" BoardTitle
    Board "1" --> "*" BoardHistory
    Board "1" *--> "1..*" Cell
    Board "1" o-- "1" SystemUser

    Cell "1" o-- "0..1" PostIt     
    Cell -left> Header
    Cell -> BoardCollumn
    Cell -> BoardRow

    ShareBoardEvent <- Board
    ShareBoardEvent --> ShareBoardService

    BoardParticipant "*" --* "1" Board
    BoardParticipant "1" o-- "*"  SystemUser
    BoardParticipant "1" *-- "1" Permissions

    PostIt -> BoardParticipant : owns <
    PostIt --> TypeOfContent

    CommitPostItEvent <- PostIt
    CommitPostItEvent ---> PostItService

    BoardHistory "1" -> "1" TimeStamp
    BoardHistory "*"--> "1" PostIt
    BoardHistory "1" --> "1" BoardParticipant : commits post-it <

}

package EventPackage <<Rectangle>> {

    abstract Event <<interface>>

    package TIMETABLE <<Aggregate>> {

        entity Timetable <<root>> <<entity>>{
        }
        note right : event access, timetable stores\nN RecurringPattern or 1(?)\nfor each user

        Timetable "*" o- "1" SystemUser 

    }

    package EVENT_PATTERN <<Aggregate>> {
        class Exception{
            -period
        }

        class RescheduleEventService <<Service>>
        Exception --> RescheduleEventService

        entity RecurringPattern <<root>> <<entity>>{
            -endDate
            -startDate
            -dayOfTheWeek
            -startTime
            -endTime
        }
        class RescheduleEventService <<Service>>

        enum RecurringFrequency <<enum>>{
            - weekly
            - once
        }

        RecurringPattern "1" *-- "1" RecurringFrequency
    }

    class CheckAvailabilityService<<Service>>

    package Lecture <<Aggregate>>{
        entity Lecture <<root>> <<entity>> {
        }
        enum LectureType {
            -regular
            -extra
        }

        entity LectureParticipant <<entity>> {

        }

        Lecture "1" *-- "1" LectureType
    }


    package MEETING <<Aggregate>> {

        entity Meeting <<root>> <<Entity>>

        class ScheduleMeetingEvent <<Event>>

        class CancelsMeetingEvent <<Event>>

        class MeetingService <<Service>>
        note right: responsible for managing\n meetings between users

        entity MeetingParticipant <<Entity>>

        enum ParticipantStatus {
            - accepted
            - rejected
            - pending
        }

        Meeting -> MeetingService
        Meeting  -up->  ScheduleMeetingEvent
        Meeting <-up- CancelsMeetingEvent

        MeetingParticipant "1" o- "*" SystemUser
        MeetingParticipant "1" *- "1" ParticipantStatus
        MeetingParticipant "*" --up> "1" Meeting

    }

    Timetable --> CheckAvailabilityService
    Timetable "1..*" -* "1" RecurringPattern


    RecurringPattern --> CheckAvailabilityService
    RecurringPattern "1" *-- "*" Exception

    Event "1" *-down- "*" RecurringPattern

    Lecture "1" o-- "1" Teacher : teaches
    Lecture "1" -down--|> "1" Event
    Lecture "1" *- "1..*" LectureParticipant
    LectureParticipant "1" *-- "1" Student


    Meeting "1" o- "1" SystemUser : administrates
    Meeting "1" -down-|> "1" Event
}

@enduml

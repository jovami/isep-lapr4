@startuml

skinparam linetype ortho
skinparam Shadowing False

skinparam class {
    BackgroundColor<<Entity>> Moccasin
    BackgroundColor<<value object>> Azure
    BackgroundColor<<Event>> MediumAquaMarine
    BackgroundColor<<Service>> SkyBlue
    ArrowColor DarkSlateGrey
}

skinparam package {
    BackgroundColor PowderBlue
    packageLayout grid
    packageColumn 2
}


package UserPackage <<Rectangle>>{

    package SYSTEMUSER <<Aggregate>> {
        Class SystemUser <<root>><<Entity>>
        class Password <<value object>>
        class Email <<value object>>
        
        SystemUser -> Password
        SystemUser -> Email
    }


    package TEACHER <<Aggregate>> {
        entity Teacher <<root>> <<Entity>>{
            - FullName
            - ShortName
            - DateOfBirth
            - TaxPayerNumber
        }
        class Acronym <<value object>>

        Teacher  ->  Acronym
    }

    package MANAGER <<Aggregate>> {
        entity Manager <<root>> <<Entity>>{
            - FullName
            - ShortName
            - DateOfBirth
            - TaxPayerNumber


        }
        class ManagerId <<value object>>

        Manager  ->  ManagerId
    }


    package STUDENT <<Aggregate>> {
        entity Student <<root>> <<Entity>>{
            - FullName
            - ShortName
            - DateOfBirth
            - TaxPayerNumber
        }
        class MecanographicNumber <<value object>>

        Student  ->  MecanographicNumber
    }

    SystemUser -down-> "0..1" Manager    
    SystemUser -down-> "0..1" Teacher
    SystemUser -down-> "0..1" Student
}

package CoursePackage <<Rectangle>> {
    package COURSE <<Aggregate>> {
        entity Course <<root>> <<Entity>>

        class CourseCode <<value object>>

        class CourseName <<value object>>

        class CourseDescription <<value object>>

        class CourseDuration <<value object>>{
            - startDate
            - endDate
        }

        enum CourseState <<enum>>{
            - closed
            - open
            - enroll
            - inProgress
            - created
        }

        class CourseCapacity <<value object>> {
            -minStudents
            -maxStudents
        }

        abstract CourseEvent <<Event>>

        class CourseClosedEvent <<Event>>
        class CourseOpenEvent <<Event>>
        class CourseEnrollOpenEvent <<Event>>
        class CourseEnrollClosedEvent <<Event>>
        class CourseCreatedEvent <<Event>>

        Course  -down-> CourseCode
        Course  -up-> CourseName
        Course  -up->  CourseState
        Course  -down->  CourseDescription
        Course  -down-> CourseCapacity
        Course -up-> CourseEvent

        Course -> CourseDuration

        CourseEvent <|-up-- CourseClosedEvent
        CourseEvent <|-left-- CourseOpenEvent
        CourseEvent <|-up-- CourseEnrollOpenEvent
        CourseEvent <|-up-- CourseEnrollClosedEvent
        CourseEvent <|-up-- CourseCreatedEvent

    }

    package STAFF <<Aggregate>>{
        entity StaffMember <<Entity>>
    }
    Course <-down-- StaffMember

    package COURSE_ACCESS <<Aggregate>>{
        entity Enrollment <<root>> <<Entity>>
    }
    Student <-- Enrollment : enrolls

    package COURSE_ENROLLMENT_REQUEST <<Aggregate>>{

        entity EnrollmentRequest <<root>> <<Entity>>
        entity DeniedReason <<value object>>

        enum RequestState <<enum>>{
            - approved
            - denied
            - pending
        }

        EnrollmentRequest "1" -> "0..1"DeniedReason
        EnrollmentRequest -> RequestState
        EnrollmentRequest  o-- "*" Student
        EnrollmentRequest --> Course        
    }

    Teacher "*" <-up-- "1" StaffMember
    Teacher "1" <-up-- "0..*" Course : teacher in charge

    class CourseManagementService <<Service>>
    Course -> CourseManagementService
    note top: responsible for enrolling students in a course,\n either by bulk import or by individual request

    Course *- "0..*" Enrollment 
}

package ExamPackage <<Rectangle>> {

    class ValidateFormativeExamSpecification <<Service>>
    note bottom of ValidateFormativeExamSpecification: validate formative exams based on formativeExamSpecification

    class ValidateRegularExamSpecification <<Service>>
    note bottom of ValidateRegularExamSpecification: validate regular exams based on regularExamSpecification

    class ValidateQuestionSpecification <<Service>>
    note bottom of ValidateQuestionSpecification: validate questions based on questionSpecification

    package REGULAR_EXAM <<Aggregate>> {

        entity RegularExam <<root>> <<Entity>>
     
        class ClosingEvent <<Event>>

        class RegularExamSpecification <<value object>>

        class ExamDate <<value object>>

    }

'code duplied??? 
'both types of exams need to have the exameSection-> 
'this exam section should store the questions for that exame(??)
    

    package FORMATIVE_EXAM <<Aggregate>> {
        entity FormativeExam <<root>> <<entity>>
        note right: feedback and grading are always on submission

        class FormativeExamSpecification <<value object>>

    }

    package QUESTION <<Aggregate>> {
        entity Question <<root>> <<entity>> {
            -description
            -solution
        }

        class QuestionSpecification <<value object>>

        /'enum QuestionType <<enum>> {
            - matching
            - multipleChoices
            - shortAnswer
            - numerical
            - selectMissingWord
            - true/False
        }'/
    }

    package EXAM_RESULT <<Aggregate>> {
        entity ExamResult <<root>> <<Entity>>{
            - period
        }
        class ExamGrade <<value object>>
        class ExamFeedback <<value object>>
        
        entity AnswerGiven <<Entity>>{
        }

    }

    class Answer <<value object>>{
    }

    class GenerateFormativeExam <<Service>>
    note bottom of GenerateFormativeExam: generate formative exams based on formativeExamSpecification
    FormativeExamSpecification --> GenerateFormativeExam
    GenerateFormativeExam --> FormativeExam

    class SubmissionEvent <<Event>>
    class ExamGradingService <<Service>>

    RegularExam ---> ExamDate
    RegularExam -down--> RegularExamSpecification


    Question  --> Answer : solution
    'Question  -up-> QuestionType
    Question -> "0..*" QuestionSpecification

    ClosingEvent <-up-- RegularExam
    SubmissionEvent -> ExamGradingService
    RegularExam --> SubmissionEvent
    FormativeExam --> SubmissionEvent

    ExamGradingService "1" -up-> "1" ExamResult

    ExamResult -up-> ExamGrade
    ExamResult -> ExamFeedback
    ExamResult  -right-> Student :does exam <
    ExamResult -> "0..1" RegularExam
    ExamResult --> "0..1" FormativeExam

    ExamResult *- "*" AnswerGiven
    AnswerGiven --->  Question
    AnswerGiven --> Answer

    Course *-- "0..*" RegularExam
    Course *-- "0..*" FormativeExam

    ClosingEvent -> ExamGradingService
    note bottom: responsible for auto-correcting\nand grading the exam

    Teacher -->  RegularExam

    FormativeExamSpecification <-- FormativeExam
    FormativeExamSpecification --> ValidateFormativeExamSpecification

    RegularExamSpecification --> ValidateRegularExamSpecification

    QuestionSpecification --> ValidateQuestionSpecification
}

package BoardPackage <<Rectangle>> {
    package BOARD <<Aggregate>> {

        entity Board <<root>> <<Entity>>{
            - MaxCollumns
            - MaxRows
        }
        class BoardTitle <<value object>>

        enum BoardStatus <<enum>>{
            - created
            - shared
            - archived
        }

        entity BoardRow <<Entity>>{
            - rowId
            - rowTitle          
        }
                
        entity BoardCollumn  <<Entity>>{
            - collumnId
            - collumnTitle
        }
        
        entity Cell <<Entity>>{
        }
        class Header<<value object>>
        
        entity BoardHistory <<Entity>>
        note left : stores every post-it that \nis created/modified

        class TimeStamp <<value object>>

        entity PostIt <<Entity>> {
            - postItId
        }
        note right: Image or text

        enum TypeOfContent <<enum>>{
            - text
            - image
        }

        
        enum Permissions <<enum>>{
            - read
            - write
        }

        class ShareBoardEvent <<Event>>

        class CommitPostItEvent <<Event>>
        note bottom : event triggered when\npost-it is created or modified

        class ShareBoardService <<Service>>
        Board --> ShareBoardService
        note right :responsible for sharing boards

        class PostItService <<Service>>
        BoardHistory ---> PostItService
        note bottom : responsible for create or modify PostIt\n(save previous post in BoardHistory)

        class CreateBoardService <<Service>>
        Board  -up-> CreateBoardService
        note bottom : responsible manage the cells in the board



    }
    
    package BOARDPARTICIPANT <<Aggregate>> {
        entity  BoardParticipant <<Entity>>
    } 

    Board *-up- "*" BoardRow
    Board *-up- "*" BoardCollumn
    Board --> BoardStatus
    Board --> BoardTitle
    Board --> "*" BoardHistory
    Board *--> "1..*" Cell
    Board <-- SystemUser : admin

    Cell "1" o-- "0..1" PostIt     
    Cell -left> Header
    Cell -> BoardCollumn
    Cell -> BoardRow

    ShareBoardEvent <- Board
    ShareBoardEvent --> ShareBoardService

    BoardParticipant --> Board
    BoardParticipant --> "*"  SystemUser
    BoardParticipant -->  Permissions

    PostIt --> BoardParticipant : owns <
    PostIt --> TypeOfContent

    CommitPostItEvent <- PostIt
    CommitPostItEvent ---> PostItService

    BoardHistory -> TimeStamp
    BoardHistory --> PostIt
    BoardHistory --> BoardParticipant : commits post-it <

}

package EventPackage <<Rectangle>> {

  

    package TIMETABLE <<Aggregate>> {

        entity Timetable <<root>> <<entity>>{
        }
        note right : event access, timetable stores\nN RecurringPattern or 1(?)\nfor each user

        Timetable "*" o- "1" SystemUser 

    }

    package EVENT <<Aggregate>> {

        class Exception{
            -period
        }

        class RescheduleEventService <<Service>>
        Exception --> RescheduleEventService

        entity RecurringPattern <<entity>>{
            -endDate
            -startDate
            -dayOfTheWeek
            -startTime
            -endTime
        }
        class RescheduleEventService <<Service>>

        enum RecurringFrequency <<enum>>{
            - weekly
            - once
        }

        RecurringPattern --> RecurringFrequency
    }

    class CheckAvailabilityService<<Service>>
    note right: checks if an user is available\n for the given RecurringPattern 

    package Lecture <<Aggregate>>{
        entity Lecture <<root>> <<entity>> {
        }
        enum LectureType {
            -regular
            -extra
        }

        entity LectureParticipant <<entity>> {

        }

        Lecture --> LectureType
        Course "1" ----> "*" Lecture
    }


    package MEETING <<Aggregate>> {

        entity Meeting <<root>> <<Entity>>

        class ScheduleMeetingEvent <<Event>>

        class CancelsMeetingEvent <<Event>>

        class MeetingService <<Service>>
        note right: responsible for managing\n meetings between users

        entity MeetingParticipant <<Entity>>

        enum ParticipantStatus {
            - accepted
            - rejected
            - pending
        }

        Meeting -> MeetingService
        Meeting  -up->  ScheduleMeetingEvent
        Meeting <-up- CancelsMeetingEvent

        MeetingParticipant "1" -> "*" SystemUser
        MeetingParticipant  ->  ParticipantStatus
        MeetingParticipant "*" --up> "1" Meeting

    }

    Timetable --> CheckAvailabilityService
    Timetable *- "0..*" RecurringPattern

    RecurringPattern --> CheckAvailabilityService
    RecurringPattern *-- "*" Exception

    Lecture --> Teacher : teaches
    Lecture *- "1..*" LectureParticipant
    LectureParticipant o-- Student


    Meeting  ->  SystemUser : administrates

    Lecture -down-> RecurringPattern
    Meeting -down-> RecurringPattern
}

@enduml

@startuml
actor User as user
participant ArchiveBoardUI as ui
participant ArchiveBoardController as ctrl
participant ArchiveBoardHandler as handler
participant MenuRequest as menu
participant SystemUser as s_user
participant ShareBoardService as svc
database BoardRepository as b_repository
participant Board as b



activate user
user -> ui :enter
activate ui

    ui -> ctrl :create(serverIP, serverPort)
    note right: create Socket\ncreate DataInputStream\ncreate DataOutputStream
    activate ctrl
    deactivate ctrl

    ui -> ctrl :listBoardsUserOwnsNotArchived()
    activate ctrl
        ctrl ->handler: create
        note right: Creation of ArchiveBoardHandler in Server\nCommunication between controller\nand handler through server
        activate handler
            handler -> menu: clientBysock(InetAddress)
            activate menu
            deactivate menu
            handler -> s_user : getUserLoggedIn()
            activate s_user
            deactivate s_user


            handler -> svc :listBoardsUserOwnsNotArchived(owner)
            note right : repositories are retrieved via\nPersistenceContext.repositories()
            activate svc
                svc -> b_repository:listBoardsUserOwnsNotArchived(user)
                activate b_repository
                deactivate b_repository
                svc -> handler : listBoardsUserOwnsNotArchived
            deactivate svc
            handler -> ctrl : stringBoardsUserOwnsNotArchived
             note right: sends boards in a string array through server
        deactivate handler

        ctrl -> ui :listBoardsUserOwnsNotArchived
            deactivate ctrl
        ui --> user : show list of boards

deactivate ui

user -> ui: chooses board to archive
activate ui
    ui -> ctrl :archivedBoards(boardTitle)
    activate ctrl
        ctrl -> handler : boardTitle
        note right: communication between controller\nand handler through server
        activate handler

        handler -> b_repository : ofIdentity(boardTitle)
        activate b_repository
            b_repository -> handler : board
        deactivate b_repository

        handler -> b :archiveBoard()
        activate b
        deactivate b

        handler -> b_repository :save(board)
        activate b_repository
        deactivate b_repository

        handler -> svc : listBoardsUserOwnsArchived(owner)
        activate svc
            svc -> b_repository :listBoardsUserOwnsArchived(user)
            activate b_repository
                b_repository -> svc :listBoardsUserOwnsArchived
            deactivate b_repository

        svc -> handler : listBoardsUserOwnsArchived
        deactivate svc

        handler -> ctrl : stringBoardsUserOwnsArchived
        note right: sends boards in a string array through server
        deactivate handler
        ctrl -> ui:listBoardsUserOwnsArchived
    deactivate ctrl

    ui--> user :show list of boards user \nowns in state archived
deactivate ui


@enduml



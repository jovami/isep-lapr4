@startuml

actor SBPServerApp as server

participant MenuRequest as menu
participant ArchiveBoardHandler as handler
participant SBProtocol as sbp
participant BoardService as svc
participant Client as c_user
participant Board as b
database BoardRepository as b_repository


activate server
server -> menu : receives GET_BOARDS_OWNED_NOT_ARCHIVED\ncode request
activate menu

    menu -> handler: create(sock,codeRequest)
    note right : receives a socket and\nSBProtocol codeRequest
    activate handler
        handler -> svc : create()
        activate svc
        deactivate svc
    deactivate handler
    menu -> handler : run()
    note right : create DataInputStream as "inS"\ncreate DataOutputStream as "outS"

    activate handler
        handler -> c_user : owner = getUserLoggedIn()
        note right: get from SBPServerApp activate status\nMap<InetAddress, Client> activeAuths\nThen from Client get SystemUser
        activate c_user
        deactivate c_user

        handler -> svc :listBoardsUserOwnsNotArchived(owner)
        activate svc
            svc -> handler : boards
        deactivate svc



        note right of handler :create string builder
        handler -> handler : sendBoardOwned(builder, boards)
        handler -> sbp : sendBoards = create()
        activate sbp
        note right of handler: loop for to append boards\ninto builder

        handler -> sbp : setContentFromString(builder)
        handler -> sbp : send(outS)
        deactivate sbp

        handler -> sbp : receiveBoard = create(inS)
        activate sbp
        handler -> sbp : getContentAsString()
        sbp --> handler : boardName
        deactivate sbp

        note right of handler: SBPServerApp as\n Map<BoardTitle, Board> boards\nget "board" with title "boardName"

        handler -> b : archiveBoard()
        activate b
        deactivate b

        handler -> b_repository : save(board)
        activate b_repository
        deactivate b_repository

        handler -> svc : listBoardsUserOwnsArchived(owner)
        activate svc
            svc -> handler : boards
        deactivate svc

        note right of handler :create string builderArchived
        handler -> handler : sendBoardOwned(builderArchived, boardsArchived)
        handler -> sbp : sendBoards = create()
       activate sbp
        note right of handler: loop for to append boards\ninto builderArchived

        handler -> sbp : setContentFromString(builder)
        handler -> sbp : send(outS)



    deactivate handler
deactivate menu





@enduml



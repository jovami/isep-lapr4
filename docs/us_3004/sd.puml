@startuml
actor User as user
participant ShareBoardUI as ui
participant ShareBoardController as ctrl

participant ShareBoardService as svc

participant Board as board
participant BoardParticipant as boardParticipant

database BoardRepository as b_repo
database BoardParticipantRepository as bp_repo
database UserRepository as u_repo

participant BoardMapper as b_mapper
participant BoardDTO as b_dto

participant BoardParticipantMapper as bp_mapper
participant BoardParticipantDTO as bp_dto

participant SystemUserNameEmailDTOMapper as u_mapper
participant SystemUserNameEmailDTO as u_dto



user -> ui : enter
activate ui
    ui -> ctrl : create()
    activate ctrl
        ctrl -> svc : create()
        note right : repositories are retrieved via\nPersistenceContext.repositories()
        activate svc
            svc -> u_repo : findAll()
            activate u_repo
                u_repo -> svc: users()
            deactivate u_repo
        deactivate svc
    deactivate ctrl


    ui -> ctrl: listBoardsUserOwns()
    activate ctrl
        ctrl -> svc : listBoardsUserOwns()
        activate svc
            svc -> u_repo: ofIdentity(userLogged)
            activate u_repo
                note right : user logged retrieved by AuthorizationService
            deactivate u_repo
            svc -> b_repo: listBoardsUserOwns(user)
            activate b_repo
                b_repo -> svc: boards
            deactivate b_repo

            svc-> b_mapper : toDTO(boards)
            activate b_mapper
            loop for each board in boards
                            b_mapper --> b_dto: create()
                            activate b_dto
                            deactivate b_dto
            end loop
            b_mapper -> svc: boardsDTOList
            deactivate b_mapper

            svc-> ctrl: boardsDTOList

        deactivate svc
        ctrl-> ui: boardsDTOList

    deactivate ctrl

    ui-> user : Show list of \nboards user owns

deactivate ui

user -> ui: Chooses a board to share
activate ui
    ui -> ctrl: Users()
    activate ctrl
        ctrl -> svc: Users()
        activate svc
            svc -> u_mapper : toDTO(users)
            activate u_mapper

            loop for each user in user
                            u_mapper --> u_dto: create()
                            activate u_dto
                            deactivate u_dto
            end loop
                u_mapper -> svc: usersDTOList
            deactivate u_mapper
            svc -> ctrl: usersDTOList
        deactivate svc
        ctrl -> ui: usersDTOList
    deactivate ctrl
    ui -> user : shows lists of users

deactivate ui


loop selecting users
    user -> ui: invite participants to board
    activate ui
    deactivate ui
end loop

ui -> ctrl: shareBoard(chosenBoardDTO,participants)
activate ui
    activate ctrl
    ctrl -> svc : shareBoard(chosenBoardDTO,participants)
    activate svc
        loop for each participant in participants
            svc -> svc : fromDTO(user)
            svc -> u_repo : ofIdentity(user)
            activate u_repo
                u_repo -> svc : systemUser
            deactivate u_repo
            svc -> board : board()
            activate board
             board -> svc :board
            deactivate board
            svc -> boardParticipant : create(board,systemUser)
            activate boardParticipant
                boardParticipant -> svc: boardParticipant
            deactivate boardParticipant
            svc -> bp_repo : save(boardParticipant)
            activate bp_repo
            deactivate bp_repo

        end loop

        svc -> ctrl: boolean
    deactivate svc
    ctrl -> ui : boolean
    deactivate ctrl

    ui->user : informs success of the operation

deactivate ui

ui -> ctrl: boardParticipants(chosenBoardDTO)
activate ui
    activate ctrl
        ctrl -> svc : boardParticipants((chosenBoardDTO)

        activate svc
            svc -> board : board()
                        activate board
                         board -> svc :board
                        deactivate board
            svc -> bp_repo: listBoardParticipants(board)
            activate bp_repo
            bp_repo -> svc : boardParticipants
            deactivate bp_repo

            svc -> bp_mapper : toDTO(boardParticipants)
            activate bp_mapper
                loop for each boardParticipant in boardParticipants
                               bp_mapper --> bp_dto: create()
                               activate bp_dto
                               deactivate bp_dto
               end loop
                   bp_mapper -> svc: boardParticipantsDTOList
            deactivate bp_mapper
            svc -> ctrl : boardParticipantsDTOList
        deactivate svc

    ctrl -> ui : boardParticipantsDTOList

    deactivate ctrl

    ui -> user: shows list of participants \nin a specific board
deactivate ui



@enduml



@startuml
actor Student as user
participant ListGradesUI as ui
participant ListStudentGradesController as ctrl

participant MyUserService as user_svc
participant Student as student

participant ListExamResultsService as svc
participant ExamResultRepository as e_repo

participant ExamGradeAndCourseDTOMapper as mapper
participant ExamGradeAndCourseDTO as dto

user -> ui : enter
activate ui
    ui --> ctrl : create()
    activate ctrl
        note right : repositories are retrieved via\nPersistenceContext.repositories()
    deactivate ctrl

    ui --> ctrl : listStudentGrades()
    activate ctrl
        ctrl --> user_svc : currentStudent()
        activate user_svc
            user_svc --> student : get()
            activate student
            deactivate student
            note right : student obtained via the framework's\nAuthz package + StudentRepository
            user_svc --> ctrl : student
        deactivate user_svc

        ctrl --> svc : regularExamResultsBasedOnGradingProperties(student)
        activate svc
            svc --> e_repo : examResultsByStudent(student)
            activate e_repo
                e_repo --> svc : examResults
            deactivate e_repo

            note bottom: The service will apply the following filters \nto the exam results:\n\n1. Include results with the "on-submission" property.\n2. Include results with the "after-closing" property \nif the closing date has already passed.
            svc --> ctrl : examResults
        deactivate svc

        ctrl --> mapper: toDTO(examResults)
        activate mapper
            loop for each course in courses
                mapper --> dto: create()
                activate dto
                deactivate dto
            end loop
            mapper --> ctrl: gradesDTOList
        deactivate mapper

        ctrl --> ui : gradesDTOList
    deactivate ctrl

    ui --> user : show available \ngrades
deactivate ui

@enduml



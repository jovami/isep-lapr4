@startuml
'https://plantuml.com/sequence-diagram

actor Teacher as Actor
participant UpdateRegularExamUI as UI <<presentation>>
participant UpdateRegularExamController as controller <<application>>

participant MyUserService as user_svc
participant Teacher as teacher

participant RegularExam as regularExam <<domain>>
participant RegularExamDate as regularExamDate <<domain>>
participant RegularExamSpecification as regularSpec<<domain>>
participant ValidateRegularExamSpecificationService as service <<service>>

participant PersistenceContext as persistence <<persistence>>
participant RepositoryFactory as factory <<factory>>
database RegularExamRepository as repoRegularExam <<repository>>
database StaffRepository as repoStaff <<repository>>
' database TeacherRepository as repoTeacher <<repository>>
database CourseRepository as repoCourse <<repository>>



participant CourseAndDescriptionDTOMapper as course_mapper
participant CourseAndDescriptionDTO as course_dto




Actor -> UI : update regular exam
activate Actor
activate UI

    UI -> controller : create
    activate controller
        controller -> persistence : repositories()
        activate persistence
            persistence -> factory : create
            activate factory
            persistence -> controller : factory
            deactivate factory
        deactivate persistence

        controller ->factory :regularExams()
        activate factory
            factory -> repoRegularExam : create
            activate repoRegularExam
            deactivate repoRegularExam
            factory -> controller : regularExamsRepository
        deactivate factory


        controller -> factory :staffs()
        activate factory
            factory -> repoStaff : create
            activate repoStaff
            deactivate repoStaff
            factory -> controller : staffRepository
        deactivate factory

        controller -> factory :courses()
        activate factory
           factory -> repoCourse : create
           activate repoCourse
           deactivate repoCourse
           factory -> controller : courseRepository
        deactivate factory

    deactivate controller


UI --> controller: getCourses()


    activate controller
        controller --> user_svc : currentTeacher()
        activate user_svc
            user_svc --> teacher : get()
            activate teacher
            deactivate teacher
            note right : teacher obtained via the framework's\nAuthz package + TeacherRepository
            user_svc --> controller : teacher
        deactivate user_svc


        controller --> repoStaff: taughtBy(teacher)

        activate repoStaff
        deactivate repoStaff

        controller --> course_mapper: toDto(courses)
        activate course_mapper
            loop for each course in courses
                course_mapper --> course_dto: create()
                activate course_dto
                deactivate course_dto
            end loop
            course_mapper --> controller: courseDTOList
        deactivate course_mapper
        controller --> UI: courses

    deactivate controller
    UI --> Actor: show courses
deactivate UI

Actor -> UI: selects course from list
activate UI
    UI --> controller: listExams(course)
    activate controller
        controller --> repoRegularExam: findByCourse(course)
        activate repoRegularExam
        deactivate repoRegularExam
        controller --> UI: exams
    deactivate controller
    UI --> Actor: show exams




deactivate UI

Actor -> UI : Choose an exam from the list of exams
activate UI
loop
    Actor -> UI : Choose update exam date or \n exam specification

    UI -> controller : updateRegularExamDate\n(regularExam,openDate,closeDate)
    activate controller
        controller -> regularExamDate : valueOf(openDate,closeDate)
        activate regularExamDate
            regularExamDate -> controller : regularExamDate
        deactivate regularExamDate

        controller -> regularExam : updateRegularExamDate(regularExamDate)
        activate regularExam
        deactivate regularExam

        controller -> repoRegularExam : save(regularExam)
        activate repoRegularExam
        deactivate repoRegularExam

        UI -->Actor : informs success of operation
        UI --> Actor : asks if teacher wants to \n update anything else(yes/no)

    deactivate controller
end loop

loop
    Actor -> UI : Choose update exam date or \n exam specification

        UI -> controller : updateRegularExamSpecification\n(regularExam,file)
        activate controller
            controller -> service : validate(file)
            activate service
            deactivate service
            controller -> regularSpec : valueOf(file)


            activate regularSpec
                regularSpec -> controller : regularSpecification
            deactivate regularSpec

            controller -> regularExam : updateRegularExamSpecification(regularSpecification)
            activate regularExam
            deactivate regularExam

            controller -> repoRegularExam : save(regularExam)
            activate repoRegularExam
            deactivate repoRegularExam

            UI -->Actor : informs success of operation
            UI --> Actor : asks if teacher wants to \n update anything else(yes/no)

        deactivate controller



end loop
deactivate UI



@enduml
